---
title: "Day 4"
date: "2025-07-22"
categories: [Memo]
description: "用GitHub做專案管理"
---

最近KM開始推動我們研究室在健保資料庫跟財稅資料庫的各項基礎建設。其中一項是使用GitHub Issues 來管理專案。似乎是被研究室裡的一些學長啟發，他決定要大家把結果依照時序、主題依照固定形式放在GitHub Issue上，方便他統一的瀏覽。

GitHub Issue 的設計確實像是一個主題式的留言板。他支持Markdown 語法，也可以加入連結到其他的Issue、文件或是特定的Commit。而企業版還有一個進階功能，是可以把Issues用一個儀表板呈現出來，依照進度分成To Do, In Progress, Done。

另外一個使用GitHub的好處是在上面的Markdown文件會被自動渲染（具體來說是依照GitHub Flavored Markdown 這個Markdown 的變體）。因此如果研究結果使用.md來紀錄，在GitHub 上就可以生成美觀的文件。這點蠻吸引人的。

---

如何管理研究進度是個難題。

我們研究室過去的狀況是大家會各自用自己習慣的方式儲存分析結果。例如我早期喜歡用Rmarkdown輸出成html給老師看（當然因為之前的專案不是在資料中心）。有些人喜歡把攜出的圖檔同一放進一份簡報。有些人就直接存在overleaf。有人甚至用R shiny把結果放在網頁上。

KM開會的時候，基本上就是我們打開什麼他就看什麼。除非要寫文章了，不然也不會管這些東西存在哪裡，怎麼整理等等。而最近他似乎是受不了了。他的說法是：「我開始上年紀了，記憶力不好，上次開會講了什麼，其實我都不記得，每次開會都要花半小時跟Coauthor一起回憶。」本質上來說，他希望所有過去跟現在的分析結果要能讓他一目了然。

究竟用GitHub 來做研究（而不是軟體開發）的專案管理是不是好的做法呢？可能還需要一些時間才看得出來。不過目前GitHub 能做到的是簡潔的佈告欄跟建議的進度追蹤，似乎已經頗為足夠了。如果功能太多（像Notion 那樣），反而有點容易分心。當然，有些功能（例如每一個Issue可以設定人來Review Pull Request） 可能在我們的情境不太實用。




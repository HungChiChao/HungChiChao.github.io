---
title: "README_script.qmd"
format: html
---

This is the documentation for R codes that works on tax filing efficiency.

# 1 Calculate optimal tax using Gurobi

## 1.1 Intro to Gurobi

Installation.

See

- [Installing the R package](https://docs.gurobi.com/projects/optimizer/en/current/reference/r/setup.html)

- [CRAN- Gurobi Installation Guide](https://cran.r-project.org/web/packages/prioritizr/vignettes/gurobi_installation_guide.html)

```{r}
library(gurobi)
```

A Gurobi model are composed of the following components.

-   constraint matrix `A`
-   sense of each constraint `sense`
-   right hand side of the constraints `rhs`
-   coefficients of the objective function `obj`
-   model sense
-   variable type

Here is an simple example provide by [Installing the R package](https://docs.gurobi.com/projects/optimizer/en/current/reference/r/setup.html).

$$
\begin{aligned}
\max_{x_1, x_2, x_3} \quad & x_1 + x_2 + 2x_3 \\
\text{s.t.} \quad 
& x_1 + 2x_2 + 3x_3 \leq 4 \\
& x_1 + x_2 \geq 1 \\
& x_1, x_2, x_3 \in \{0, 1\}
\end{aligned}
$$

The following code solve the problem.

```{r}
# create optimization problem
model <- list()
model$obj        <- c(1, 1, 2)
model$modelsense <- "max"
model$rhs        <- c(4, 1)
model$sense      <- c("<", ">")
model$vtype      <- "B"
model$A          <- matrix(c(1, 2, 3, 1, 1, 0), nrow = 2, ncol = 3,
                           byrow = TRUE)

# solve the optimization problem using Gurobi
result <- gurobi(model, list())

print(result$objval) # objective
print(result$x)
```

## Solving Optimal Tax Filing Strategy

The following function create a `gurobi model` and solve the model. The input data should be a `data.table` like:

```{r}
#| messege = FALSE

library(data.table)
```

```{r}
exm_dt <- data.table(
  rfn = c("0000001", "0000002", "0000003"), # fake rfn
  fr_alive = c(1,1,1), # should be all identical
  mo_alive = c(0,0,0),  # should be all identical
  fr_effect = c(145500, 145500, 145500),
  mo_effect = c(0,0,0)
)

exm_dt
```

In our setting the objective function is not linear but piece-wise linear. So we use `pwlobj` instead of `obj`. Two vectors, `u` and `uy` should be supported beforehand. I did not make them arguments of the function because I use function factories.

```{r}
best_strategy_fm <- function(Data){
    D <- copy(Data)
    
    {
      I <- Data$true_income 
      
      # Whether their father/ mother still alive 
      Has_father <- Data$fr_alive[1]
      Has_mother <-  Data$mo_alive[1]
      
      # Deduction
      fr_effect <- Data$fr_effect[1]
      mo_effect <- Data$mo_effect[1]
      K <- length(I)
      n_variable <- K*3
      
      # Create Groubi Model
      model <- list()
      model$modelsense <- "min"
      
      # List of constraints
      A_matrix <- matrix(0,nrow = K, ncol = n_variable)
      rhs_vector <- numeric(K)
      
      for (i in 1:length(I)) {
        
        x_no_support <- I[i]
        x_support_father <- x_no_support - fr_effect
        x_support_mother <- x_no_support - mo_effect
        
        # Equality Constraint i
        # xi= fi*support + mi*support_mother + (1-fi-mi)*x_no_support
        
        A_matrix[i,(i-1)*3+1] <- x_no_support-x_support_father
        A_matrix[i,(i-1)*3+2] <- x_no_support-x_support_mother
        A_matrix[i,(i-1)*3+3] <- 1
        rhs_vector[i] <- max(x_no_support,0)
        
        # Piece-wise linear Objective function of Tax( xi)
        model$pwlobj[[(i-1)*3+3]] <- list(var=(i-1)*3+3, x=u, y=uy)
        model$pwlobj[[(i-1)*3+2]] <- list(var=(i-1)*3+3, x=0, y=0)
        model$pwlobj[[(i-1)*3+1]] <- list(var=(i-1)*3+3, x=0, y=0)
      }
      
      # Father Dependency Constraint (Binary, Inequality)
      sum_constraint <- numeric(n_variable)
      sum_constraint[seq(1,by=3,length.out=K)] <- Has_father
      A_matrix <- rbind(A_matrix,sum_constraint)
      rhs_vector <- c(rhs_vector,Has_father)
      
      # Mother Dependency Constraint (Binary, Inequality)
      sum_constraint <- numeric(n_variable)
      sum_constraint[seq(2,by=3,length.out=K)] <-Has_mother
      A_matrix <- rbind(A_matrix,sum_constraint)
      rhs_vector <- c(rhs_vector,Has_mother)
      
      
      model$A <- A_matrix
      model$rhs <- rhs_vector
      
      # 可以都不分配爸媽 
      model$sense <- c(rep("=",K),rep("<=",2))
      
      # Upper Bound And Lower Bound
      model$lb <- rep(c(0,0,-Inf),K)
      model$ub <- rep(c(Has_father,Has_mother,Inf),K)
      
      # Variable Types: Variable Types, binary or continuous
      model$vtype <- rep(c(rep("B",2),"C"),K)
      
      
      result <- gurobi(model,params = list( OutputFlag=0))
      
      solution <- result$x
      
    }
    Fr_distribution <- solution[seq(1, by=3, length.out=K)]
    Mo_distribution <- solution[seq(2, by=3, length.out=K)]
    
    D[,best_daddy := Fr_distribution]
    D[,best_mommy := Mo_distribution]
    D[,best_income_net_dis := solution[seq(3,by=3,length.out=K)]]
    
    return(D)
  }
```

```{r}
best_strategy_fm_yearly <- function(yr){
  
  ## 0 Set Up (By year) --------------------------------------------
  
  # functions for calculating tax
  tax_cal <- tax_calculator( tax_rate_table[[ yr - START_YR + 1]] )
  cutoff <- tax_rate_table[[yr - START_YR + 1]]
  cutoff <- cutoff[ ! is.na(cutoff) ]
  
  # Objective Function
  u <- c( -10000, 0, cutoff, 100000000)
  uy <- sapply(u,tax_cal)
  
  best_strategy_fm <- function(Data){
    ...
    return(D)
  }
  
  return(best_strategy_fm)
}
```
